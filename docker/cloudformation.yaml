"Description" : "Spads on ECS"

Parameters: 
    Cluster:
        Description: Please provide the ECS Cluster ID that this service should run on
        Type: String
        Default: "SpadsCluster2"
    VPC:
        Description: The VPC that the ECS cluster is deployed to
        Type: AWS::EC2::VPC::Id
        Default: "vpc-0a373ee57d6813f0f"
 
    Subnet1:
        Type: AWS::EC2::Subnet::Id
        Description: First Public Subnet
        Default: "subnet-0a642ab556f4a09e5"

    Subnet2:
        Type: AWS::EC2::Subnet::Id
        Description: Second Public Subnet
        Default: "subnet-0a72e57a2780b84a8"
    Domain:
        Description: An arbitrary internal domain name for the application (only required for internal service discovery - default is yelb.local). It must be unique across multiple deploymemts.
        Type: String
        Default: "spads.local"
    LaunchType:
        Description: Please provide the LaunchType
        Type: String
        Default: EC2
        AllowedValues:
               - EC2
               - FARGATE
    PublicIP:
        Description: Please provide IP connectivity option
        Type: String
        Default: ENABLED
        AllowedValues:
               - ENABLED
               - DISABLED
    DesiredCapacity:
      Type: Number
      Default: '1'
      Description: Number of instances to launch in your ECS cluster.
    MaxSize:
      Type: Number
      Default: '2'
      Description: Maximum number of instances that can be launched in your ECS cluster.
    InstanceType:
      Description: EC2 instance type
      Type: String
      Default: t2.large
      AllowedValues:
        - t2.micro
        - t2.small
        - t2.medium
        - t2.large
        - m3.medium
        - m3.large
        - m3.xlarge
        - m3.2xlarge
        - m4.large
        - m4.xlarge
        - m4.2xlarge
        - m4.4xlarge
        - m4.10xlarge
        - c4.large
        - c4.xlarge
        - c4.2xlarge
        - c4.4xlarge
        - c4.8xlarge
        - c3.large
        - c3.xlarge
        - c3.2xlarge
        - c3.4xlarge
        - c3.8xlarge
        - r3.large
        - r3.xlarge
        - r3.2xlarge
        - r3.4xlarge
        - r3.8xlarge
        - i2.xlarge
        - i2.2xlarge
        - i2.4xlarge
        - i2.8xlarge
      ConstraintDescription: Please choose a valid instance type.

Resources:
    MountTargetSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId: !Ref 'VPC'
            GroupDescription: Security group for mount target
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: '2049'
              ToPort: '2049'
              CidrIp: 0.0.0.0/0
    SpringDataVolume:
      Type: AWS::EFS::FileSystem
      DeletionPolicy: "Retain"
      Properties:
        PerformanceMode: generalPurpose
        Encrypted: true
        FileSystemTags:
        - Key: Name
          Value: "spads_spring_data"
    SpringEnginesVolume:
      Type: AWS::EFS::FileSystem
      DeletionPolicy: "Retain"
      Properties:
        PerformanceMode: generalPurpose
        Encrypted: true
        FileSystemTags:
        - Key: Name
          Value: "spring_engines"
    SpadsCacheVolume:
      Type: AWS::EFS::FileSystem
      DeletionPolicy: "Retain"
      Properties:
        PerformanceMode: generalPurpose
        Encrypted: true
        FileSystemTags:
        - Key: Name
          Value: "spads_cache"
    SpringDataMountTarget:
      Type: AWS::EFS::MountTarget
      Properties:
        FileSystemId: !Ref 'SpringDataVolume'
        SubnetId: !Ref 'Subnet1'
        SecurityGroups: 
          - Ref: 'MountTargetSecurityGroup'
    SpringEnginesMountTarget:
      Type: AWS::EFS::MountTarget
      Properties:
        FileSystemId: !Ref 'SpringEnginesVolume'
        SubnetId: !Ref 'Subnet1'
        SecurityGroups: 
          - Ref: 'MountTargetSecurityGroup'
    SpadsCacheMountTarget:
      Type: AWS::EFS::MountTarget
      Properties:
        FileSystemId: !Ref 'SpadsCacheVolume'
        SubnetId: !Ref 'Subnet1'
        SecurityGroups: 
          - Ref: 'MountTargetSecurityGroup'

    ServiceSpads: 
        Type: AWS::ECS::Service
        DependsOn:
          - SpadsLoadBalancerListener
          - SpringDataMountTarget
          - SpringEnginesMountTarget
          - SpadsCacheMountTarget
        Properties: 
            HealthCheckGracePeriodSeconds: 180000
            Cluster: !Ref Cluster
            DesiredCount: 1
            LoadBalancers:
            - ContainerName: 'spads-server'
              ContainerPort: 8452
              TargetGroupArn: !Ref SpadsTargetGroup
            TaskDefinition: !Ref 'TaskDefinitionSpadsServer'
            Role: !Ref 'ECSServiceRole'

    TaskDefinitionSpadsServer:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Family: spads-server
            NetworkMode: host
            RequiresCompatibilities:
                - EC2
            ExecutionRoleArn: !Ref 'SpadsECSTaskExecutionRole'
            Volumes:
                - Name: spring_data
                  EFSVolumeConfiguration:
                      FilesystemId: !Ref 'SpringDataVolume'
                - Name: spring_engines
                  EFSVolumeConfiguration:
                      FilesystemId: !Ref 'SpringEnginesVolume'
                - Name: spads_cache
                  EFSVolumeConfiguration:
                      FilesystemId: !Ref 'SpadsCacheVolume'
            ContainerDefinitions:
                - Name: spads-server
                  Memory: 800
                  Essential: true
                  Image: 805473682432.dkr.ecr.eu-central-1.amazonaws.com/spads/spads:latest
                  #DependsOn:
                  #  - Condition: 'COMPLETE'
                  #    ContainerName: 'spads-update'
                  MountPoints:
                    - SourceVolume: "spring_data"
                      ContainerPath: "/spring-data"
                    - SourceVolume: "spring_engines"
                      ContainerPath: "/spring-engines"
                    - SourceVolume: "spads_cache"
                      ContainerPath: "/opt/spads/var"
                  Environment: 
                    - Name: SPADS_OWNER_LOBBY_LOGIN
                      Value: '[teh]host25'
                    - Name: SPADS_LOBBY_LOGIN
                      Value: '[teh]host25'
                    - Name: SPADS_LOBBY_PASSWORD
                      Value: 'barhost25'
                    - Name: SPADS_LOBBY_HOST
                      Value: 'bar.teifion.co.uk'
                    - Name: SPRING_DATADIR
                      Value: '/spring-data'
                    - Name: SPRING_WRITEDIR
                      Value: '/spring-data'
                    - Name: SPADS_LAN_IP
                      Value: '127.0.0.1'
                    - Name: SPADS_ARGS
                      Value: '--tls-cert-trust'
                  PortMappings:
                    - ContainerPort: 8452
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref AWS::StackName
                        awslogs-region: !Ref AWS::Region
                        awslogs-stream-prefix: "spads"

                - Name: spads-update
                  Essential: false
                  Command: 
                    - sh
                    - /usr/bin/sync-all.sh
                  Memory: 300
                  Image: 805473682432.dkr.ecr.eu-central-1.amazonaws.com/spads/spads-services
                  MountPoints:
                    - SourceVolume: "spring_data"
                      ContainerPath: "/spring-data"
                    - SourceVolume: "spring_engines"
                      ContainerPath: "/spring-engines"
                  Environment: 
                    - Name: SPRING_DATADIR
                      Value: '/spring-data'
                    - Name: SPRING_WRITEDIR
                      Value: '/spring-data'
                    - Name: RCLONE_DRIVE_TOKEN
                      Value: >
                        {"access_token":"ya29.a0ARrdaM9VtH5TFvRoumVu65I7ueOL9BKUe7Yl-qodi_b7iLtpHRqkAXHAkJaLNiVuSt4yrAGSTN2Z3ePsAP2FslgJNQheY_Q4e8_R4tgHoRDilp5hrj8cMrGw0fSxLWBSt8yWDa7K8V5w39j-t5D5aBoyeGdV","token_type":"Bearer","refresh_token":"1//0hU6MGqk6O8_BCgYIARAAGBESNwF-L9IrXrG0tnDA_SuOYjE7EufdX2LFPvIeB91w8KV2vUpSdt_BY5o44krDvZH6O99K_sZacXI","expiry":"2021-09-29T03:09:15.240635882Z"}
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref AWS::StackName
                        awslogs-region: !Ref AWS::Region
                        awslogs-stream-prefix: "spads-engine-update"

    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties: 
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 365  

    # This is a role which is used by the ECS tasks themselves.
    SpadsECSTaskExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                - Effect: Allow
                  Principal:
                     Service: [ecs-tasks.amazonaws.com]
                  Action: ['sts:AssumeRole']
            Path: /
            Policies:
                - PolicyName: AmazonECSTaskExecutionRolePolicy
                  PolicyDocument:
                    Statement:
                        - Effect: Allow
                          Action:
                            # Allow the ECS Tasks to download images from ECR
                            - 'ecr:GetAuthorizationToken'
                            - 'ecr:BatchCheckLayerAvailability'
                            - 'ecr:GetDownloadUrlForLayer'
                            - 'ecr:BatchGetImage'

                            # Allow the ECS tasks to upload logs to CloudWatch
                            - 'logs:CreateLogStream'
                            - 'logs:PutLogEvents'

                            # Allow the ECS tasks to register into the target group
                            - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                            - 'elasticloadbalancing:Describe*'
                            - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                            - 'elasticloadbalancing:DeregisterTargets'
                            - 'elasticloadbalancing:DescribeTargetGroups'
                            - 'elasticloadbalancing:DescribeTargetHealth'
                            - 'elasticloadbalancing:RegisterTargets'

                            - "ec2:CreateTags"
                            - "ec2:AttachVolume"
                            - "ec2:DetachVolume"
                            - "ec2:CreateVolume"
                            - "ec2:DeleteVolume"
                            - "ec2:DescribeVolumes"
                            - "ec2:DescribeVolumeStatus"
                            - "ec2:CreateSnapshot"
                            - "ec2:DeleteSnapshot"
                            - "ec2:DescribeSnapshots"
                          Resource: '*'
    ECSServiceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              Service: [ecs.amazonaws.com]
            Action: ['sts:AssumeRole']
        Path: /
        Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action: ['elasticloadbalancing:DeregisterInstancesFromLoadBalancer', 'elasticloadbalancing:DeregisterTargets',
                'elasticloadbalancing:Describe*', 'elasticloadbalancing:RegisterInstancesWithLoadBalancer',
                'elasticloadbalancing:RegisterTargets', 'ec2:Describe*', 'ec2:AuthorizeSecurityGroupIngress']
              Resource: '*'

    SpadsServerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: spads security group
            SecurityGroupIngress:
            - CidrIp: '0.0.0.0/0'
              IpProtocol: udp
              ToPort: 8452
              FromPort: 8452
            SecurityGroupEgress:
            - CidrIp: '0.0.0.0/0'
              IpProtocol: tcp
              ToPort: 65535
              FromPort: 0
            VpcId: !Ref 'VPC'

    SpadsLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Scheme: internet-facing
        Subnets: [ !Ref 'Subnet1' , !Ref 'Subnet2' ]
        Type: network

    SpadsLoadBalancerListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        LoadBalancerArn: !Ref SpadsLoadBalancer
        Port: 8452
        Protocol: UDP
        DefaultActions:
          - Type: forward
            TargetGroupArn: !Ref SpadsTargetGroup

    SpadsTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        #HealthCheckIntervalSeconds: 30
        ##HealthCheckPath: /
        #HealthCheckProtocol: UDP
        #HealthCheckTimeoutSeconds: 5
        #HealthyThresholdCount: 2
        #TargetType: ip 
        VpcId: !Ref VPC
        Port: 8452
        Protocol: UDP
    EcsSecurityGroupSSHinbound:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupId: !Ref 'SpadsServerSecurityGroup'
        IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0

    EcsSecurityGroupALBports:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        GroupId: !Ref 'SpadsServerSecurityGroup'
        IpProtocol: tcp
        FromPort: '31000'
        ToPort: '61000'
        SourceSecurityGroupId: !Ref 'SpadsServerSecurityGroup'

#Resources:
#  ECSCluster:
#    Type: AWS::ECS::Cluster
#  EcsSecurityGroup:
#    Type: AWS::EC2::SecurityGroup
#    Properties:
#      GroupDescription: ECS Security Group
#      VpcId: !Ref 'VpcId'
#  EcsSecurityGroupHTTPinbound:
#    Type: AWS::EC2::SecurityGroupIngress
#    Properties:
#      GroupId: !Ref 'EcsSecurityGroup'
#      IpProtocol: tcp
#      FromPort: '80'
#      ToPort: '80'
#      CidrIp: 0.0.0.0/0
#  CloudwatchLogsGroup:
#    Type: AWS::Logs::LogGroup
#    Properties:
#      LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
#      RetentionInDays: 14
#  taskdefinition:
#    Type: AWS::ECS::TaskDefinition
#    Properties:
#      Family: !Join ['', [!Ref 'AWS::StackName', -ecs-demo-app]]
#      ContainerDefinitions:
#      - Name: simple-app
#        Cpu: '10'
#        Essential: 'true'
#        Image: httpd:2.4
#        Memory: '300'
#        LogConfiguration:
#          LogDriver: awslogs
#          Options:
#            awslogs-group: !Ref 'CloudwatchLogsGroup'
#            awslogs-region: !Ref 'AWS::Region'
#            awslogs-stream-prefix: ecs-demo-app
#        MountPoints:
#        - ContainerPath: /usr/local/apache2/htdocs
#          SourceVolume: my-vol
#        PortMappings:
#        - ContainerPort: 80
#Outputs:
#  ecsservice:
#    Value: !Ref 'service'
#  ecscluster:
#    Value: !Ref 'ECSCluster'
#  ECSALB:
#    Description: Your ALB DNS URL
#    Value: !Join ['', [!GetAtt [ECSALB, DNSName]]]
#  taskdef:
#    Value: !Ref 'taskdefinition'
